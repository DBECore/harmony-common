- hosts: localhost
  gather_facts: no
  roles:
    - role: local
      vars:
        tomcat_version: '8'
  tasks:
    - name: check SMP war exists
      stat:
        path: "{{playbook_dir}}/files/binary/smp-4.1.1.war"
      register: smpwar

    - name: download SMP war to local cache
      get_url:
        url: https://ec.europa.eu/cefdigital/artifact/repository/public/eu/europa/ec/edelivery/smp/4.1.1/smp-4.1.1.war
        dest: "{{playbook_dir}}/files/binary/smp-4.1.1.war"
      when: not smpwar.stat.exists

- hosts: lxd_servers
  roles:
    - init-lxd

- hosts: smp_servers
  become: yes
  vars:
    certs_dir: /root/certs
  pre_tasks:
    - import_tasks: tasks/find_sml_ip.yml

    - name: store smp hostname
      set_fact:
        smp_hostname: "{{ inventory_hostname if lxd_suffix is undefined or not lxd_suffix else inventory_hostname + '.lxd' }}"

    - name: find smp ip (dig)
      set_fact:
        smp_ip : "{{ lookup('dig', smp_hostname) }}"

    - name: find sml ip (/etc/hosts)
      set_fact:
        smp_ip: "{{ (lookup('file', '/etc/hosts').splitlines()|
                             list|
                             select('search', smp_hostname)|
                             list|
                             first).split().0 }}"
      when: smp_ip is undefined or smp_ip|length == 0 or smp_ip=='NXDOMAIN'

  roles:
    - common
    - mysql
    - role: tomcat
      vars:
        tomcat_version: '8'
        setenv_file: "{{playbook_dir}}/files/smp/setenv.sh"
    - private_dns

  tasks:
    - name: check if jks exists
      stat:
        path: /opt/tomcat/custom_conf/smp-keystore.jks
      register: jks

    - debug:
        msg: "{{jks}}"
        
    - name: Ensure directory exists for local self-signed TLS certs.
      file:
        path: "{{ certs_dir }}"
        state: directory
      when: not jks.stat.exists|bool

    - name: Generate an OpenSSL private key.
      openssl_privatekey:
        path: "{{ certs_dir }}/{{ inventory_hostname }}_privkey.key"
        force: true
      register: privkey
      when: not jks.stat.exists|bool

    - name: Generate an OpenSSL CSR.
      openssl_csr:
        path: "{{ certs_dir }}/{{ inventory_hostname }}.csr"
        privatekey_path: "{{ certs_dir }}/{{ inventory_hostname }}_privkey.key"
        common_name: "{{ inventory_hostname }}"
        organization_name: NIIS
        country_name: FI
        force: true
      when: not jks.stat.exists|bool

    - name: Generate a Self Signed OpenSSL certificate.
      openssl_certificate:
        path: "{{ certs_dir }}/{{ inventory_hostname }}_certificate.crt"
        privatekey_path: "{{ certs_dir }}/{{ inventory_hostname }}_privkey.key"
        csr_path: "{{ certs_dir }}/{{ inventory_hostname }}.csr"
        # smp does not handle not_before and not_after fields correctly (timezone is changed to gmt)
        selfsigned_not_before: -3d
        provider: selfsigned
        selfsigned_version: 3
      register: cert
      when: not jks.stat.exists|bool

    - name: Slurp key file
      slurp:
        src: "{{ certs_dir }}/{{ inventory_hostname }}_privkey.key"
      register: keyfile
      when: not jks.stat.exists|bool

    - name: Slurp certificate file
      slurp:
        src: "{{ certs_dir }}/{{ inventory_hostname }}_certificate.crt"
      register: certfile
      when: not jks.stat.exists|bool

    - name: Create Java keystore
      java_keystore:
        name: "{{ inventory_hostname }}"
        certificate: "{{certfile.content | b64decode }}"
        private_key: "{{keyfile.content | b64decode }}"
        password: password
        dest: /opt/tomcat/custom_conf/smp-keystore.jks
      when: not jks.stat.exists|bool

    - name: collect info about database
      mysql_info:
        login_user: root
        login_password: root
      register: db_state

    - name: copy ddl file
      copy:
        src: "{{playbook_dir}}/files/smp/smp_schema.ddl"
        dest: /root
      when: db_state.databases.smp is not defined

    - name: create database
      mysql_db:
        name: smp
        state: import
        encoding: utf8
        login_user: root
        login_password: root
        target: /root/smp_schema.ddl
      when: db_state.databases.smp is not defined

    - name: create db settings file
      template:
        src: "{{playbook_dir}}/files/smp/smp_configuration.sql"
        dest: /root/smp_configuration.sql

    - name: load settings into db
      mysql_db:
        name: smp
        state: import
        encoding: utf8
        login_user: root
        login_password: root
        target: /root/smp_configuration.sql

    - name: create conf folder
      file:
        path: /opt/tomcat/custom_conf
        state: directory
        owner: tomcat
        group: tomcat

    - name: copy smp conf file
      copy:
        src: "{{playbook_dir}}/files/smp/smp.config.properties"
        dest: /opt/tomcat/custom_conf/smp.config.properties
        force: true
        owner: tomcat
        group: tomcat

    - name: copy smp context.xml file
      copy:
        src: "{{playbook_dir}}/files/smp/smp_context.xml"
        dest: /opt/tomcat/conf/context.xml
        force: true
        owner: tomcat
        group: tomcat

    - name: copy smp war to webapps
      copy:
        src: "{{playbook_dir}}/files/binary/smp-4.1.1.war"
        dest: /opt/tomcat/webapps/ROOT.war
        owner: tomcat
        group: tomcat

