AWSTemplateFormatVersion: 2010-09-09
Description: >-
  NIIS eDelivery solution pentesting environemnt (2021-10-28).
Parameters:
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: AZ, sync with subnet!
    Default: eu-west-1a
  SMLInstanceType:
    Description: SML instance type
    Type: String
    Default: t3a.small
    AllowedValues:
      - none
      - t3a.small
      - t3a.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SMPInstanceType:
    Description: SMP instance type
    Type: String
    Default: t3a.small
    AllowedValues:
      - none
      - t3a.small
      - t3a.medium
    ConstraintDescription: must be a valid EC2 instance type.
  APInstanceType:
    Description: AP instance type
    Type: String
    Default: t3a.small
    AllowedValues:
      - none
      - t3a.small
      - t3a.medium
    ConstraintDescription: must be a valid EC2 instance type.
  RootVolumeSize:
    Description: The root volume size for instances
    Type: String
    Default: 8
    AllowedValues:
      - 8
      - 16
      - 32
    ConstraintDescription: must be a valid gp2 volume size.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Environment:
    Description: Environment name (string, just letters, plz)
    Type: String
    Default: nedspen
  HostedZone:
    Description: Route53 hosted zone
    Default: x-road.rocks
    Type: String
  VpcId:
    Description: VPC to use
    Type: AWS::EC2::VPC::Id
    Default: vpc-aff03bc9
  SubnetID:
    Description: Subnet ID, sync with AZ!
    Type: AWS::EC2::Subnet::Id
    Default: subnet-6fb00609
  BastionSecurityGroup:
    Description: Security group of bastion server (e.g. bastion-sg)
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-14670669
  AutoStopStart:
    Description: Start and stop instances automatically?
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'
    ConstraintDescription: must be true or false.
  AutoStop:
    Description: Stop instances automatically?
    Type: String
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
    ConstraintDescription: must be true or false.
  AutoSnapshot:
    Description: Snapshot instances automatically?
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'
    ConstraintDescription: must be true or false.
  UbuntuFocalAMI:
    Description: Ubuntu 20.04 AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-03caf24deed650e2c
Conditions:
  CreateSML: !Not [!Equals [!Ref SMLInstanceType, none]]
  CreateSMP: !Not [!Equals [!Ref SMPInstanceType, none]]
  CreateAP: !Not [!Equals [!Ref APInstanceType, none]]
Resources:
  SMLInstance:
    Type: AWS::EC2::Instance
    Condition: CreateSML
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      ImageId: !Ref UbuntuFocalAMI
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref SMLSecurityGroup
      InstanceType: !Ref SMLInstanceType
      Monitoring: false
      SubnetId: !Ref SubnetID
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-sml
        - Key: env
          Value: !Ref Environment
        - Key: role
          Value: sml
        - Key: AutoStopStart
          Value: !Ref AutoStopStart
        - Key: AutoStop
          Value: !Ref AutoStop
        - Key: AutoSnapshot
          Value: !Ref AutoSnapshot
      UserData: !Base64 |
        #!/bin/bash -xe
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        apt-get install -y aptitude
        useradd -c 'NIIS Team User' -d /home/niis -s /bin/bash niis
        echo 'niis ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/niis
        mkdir -p /home/niis/.ssh
        curl -o /home/niis/.ssh/authorized_keys https://s3-eu-west-1.amazonaws.com/niis-xroad-ci-files/niis-authorized-ssh-keys
        chown -R niis:niis /home/niis
        chmod 0700 /home/niis
        chmod 0700 /home/niis/.ssh
        chmod 0600 /home/niis/.ssh/authorized_keys
  SMPBlueInstance:
    Type: AWS::EC2::Instance
    Condition: CreateSMP
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      ImageId: !Ref UbuntuFocalAMI
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref NEDSSecurityGroup
      InstanceType: !Ref SMPInstanceType
      Monitoring: false
      SubnetId: !Ref SubnetID
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-blue-smp
        - Key: env
          Value: !Ref Environment
        - Key: role
          Value: smp
        - Key: AutoStopStart
          Value: !Ref AutoStopStart
        - Key: AutoStop
          Value: !Ref AutoStop
        - Key: AutoSnapshot
          Value: !Ref AutoSnapshot
      UserData: !Base64 |
        #!/bin/bash -xe
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        apt-get install -y aptitude
        useradd -c 'NIIS Team User' -d /home/niis -s /bin/bash niis
        echo 'niis ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/niis
        mkdir -p /home/niis/.ssh
        curl -o /home/niis/.ssh/authorized_keys https://s3-eu-west-1.amazonaws.com/niis-xroad-ci-files/niis-authorized-ssh-keys
        chown -R niis:niis /home/niis
        chmod 0700 /home/niis
        chmod 0700 /home/niis/.ssh
        chmod 0600 /home/niis/.ssh/authorized_keys
  SMPRedInstance:
    Type: AWS::EC2::Instance
    Condition: CreateSMP
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      ImageId: !Ref UbuntuFocalAMI
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref NEDSSecurityGroup
      InstanceType: !Ref SMPInstanceType
      Monitoring: false
      SubnetId: !Ref SubnetID
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-red-smp
        - Key: env
          Value: !Ref Environment
        - Key: role
          Value: smp
        - Key: AutoStopStart
          Value: !Ref AutoStopStart
        - Key: AutoStop
          Value: !Ref AutoStop
        - Key: AutoSnapshot
          Value: !Ref AutoSnapshot
      UserData: !Base64 |
        #!/bin/bash -xe
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        apt-get install -y aptitude
        useradd -c 'NIIS Team User' -d /home/niis -s /bin/bash niis
        echo 'niis ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/niis
        mkdir -p /home/niis/.ssh
        curl -o /home/niis/.ssh/authorized_keys https://s3-eu-west-1.amazonaws.com/niis-xroad-ci-files/niis-authorized-ssh-keys
        chown -R niis:niis /home/niis
        chmod 0700 /home/niis
        chmod 0700 /home/niis/.ssh
        chmod 0600 /home/niis/.ssh/authorized_keys
  APBlueInstance:
    Type: AWS::EC2::Instance
    Condition: CreateAP
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      ImageId: !Ref UbuntuFocalAMI
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref NEDSSecurityGroup
      InstanceType: !Ref APInstanceType
      Monitoring: false
      SubnetId: !Ref SubnetID
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-blue-ap
        - Key: env
          Value: !Ref Environment
        - Key: role
          Value: ap
        - Key: AutoStopStart
          Value: !Ref AutoStopStart
        - Key: AutoStop
          Value: !Ref AutoStop
        - Key: AutoSnapshot
          Value: !Ref AutoSnapshot
      UserData: !Base64 |
        #!/bin/bash -xe
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        apt-get install -y aptitude
        useradd -c 'NIIS Team User' -d /home/niis -s /bin/bash niis
        echo 'niis ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/niis
        mkdir -p /home/niis/.ssh
        curl -o /home/niis/.ssh/authorized_keys https://s3-eu-west-1.amazonaws.com/niis-xroad-ci-files/niis-authorized-ssh-keys
        chown -R niis:niis /home/niis
        chmod 0700 /home/niis
        chmod 0700 /home/niis/.ssh
        chmod 0600 /home/niis/.ssh/authorized_keys
  APRedInstance:
    Type: AWS::EC2::Instance
    Condition: CreateAP
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      ImageId: !Ref UbuntuFocalAMI
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref NEDSSecurityGroup
      InstanceType: !Ref APInstanceType
      Monitoring: false
      SubnetId: !Ref SubnetID
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-red-ap
        - Key: env
          Value: !Ref Environment
        - Key: role
          Value: ap
        - Key: AutoStopStart
          Value: !Ref AutoStopStart
        - Key: AutoStop
          Value: !Ref AutoStop
        - Key: AutoSnapshot
          Value: !Ref AutoSnapshot
      UserData: !Base64 |
        #!/bin/bash -xe
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        apt-get install -y aptitude
        useradd -c 'NIIS Team User' -d /home/niis -s /bin/bash niis
        echo 'niis ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/niis
        mkdir -p /home/niis/.ssh
        curl -o /home/niis/.ssh/authorized_keys https://s3-eu-west-1.amazonaws.com/niis-xroad-ci-files/niis-authorized-ssh-keys
        chown -R niis:niis /home/niis
        chmod 0700 /home/niis
        chmod 0700 /home/niis/.ssh
        chmod 0600 /home/niis/.ssh/authorized_keys
  NEDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for all instances in stack
      VpcId: !Ref VpcId
  AllowTLSFromNEDSToNEDS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NEDSSecurityGroup
      SourceSecurityGroupId: !Ref NEDSSecurityGroup
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh, http and soap from/to bastion
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
  SMLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable DNS queries from other stack hosts
      VpcId: !Ref VpcId
      Tags:
        - Key: StackName
          Value: !Ref "AWS::StackName"
        - Key: Name
          Value: !Sub ${AWS::StackName}-smlsecuritygroup
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref NEDSSecurityGroup
          IpProtocol: -1
          FromPort: 53
          ToPort: 53
  SMLPrivateIPDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateSML
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for SML instance's private IP
      Name: !Sub ${Environment}-sml.i.${HostedZone}.
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt SMLInstance.PrivateIp
  SMPBluePrivateIPDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateSMP
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for SMP instance's private IP
      Name: !Sub ${Environment}-blue-smp.i.${HostedZone}.
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt SMPBlueInstance.PrivateIp
  SMPRedPrivateIPDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateSMP
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for SMP instance's private IP
      Name: !Sub ${Environment}-red-smp.i.${HostedZone}.
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt SMPRedInstance.PrivateIp
  APBluePrivateIPDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateAP
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for AP instance's private IP
      Name: !Sub ${Environment}-blue-ap.i.${HostedZone}.
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt APBlueInstance.PrivateIp
  APRedPrivateIPDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateAP
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for AP instance's private IP
      Name: !Sub ${Environment}-red-ap.i.${HostedZone}.
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt APRedInstance.PrivateIp
Outputs:
  SMLHostname:
    Condition: CreateSML
    Description: Hostname of SML
    Value: !Ref SMLPrivateIPDNSRecord
  SMLIpAddress:
    Condition: CreateSML
    Description: Ip Address of SML
    Value: !GetAtt SMLInstance.PrivateIp
  SMPBlueHostname:
    Condition: CreateSMP
    Description: Hostname of CEF SMP
    Value: !Ref SMPBluePrivateIPDNSRecord
  SMPRedHostname:
    Condition: CreateSMP
    Description: Hostname of Harmony SMP
    Value: !Ref SMPRedPrivateIPDNSRecord
  SMPBlueIpAddress:
    Condition: CreateSMP
    Description: Ip Address of SMP
    Value: !GetAtt SMPBlueInstance.PrivateIp
  SMPRedIpAddress:
    Condition: CreateSMP
    Description: Ip Address of SMP
    Value: !GetAtt SMPRedInstance.PrivateIp
  APBlueHostname:
    Condition: CreateAP
    Description: Hostname of AP
    Value: !Ref APBluePrivateIPDNSRecord
  APBlueIpAddress:
    Condition: CreateAP
    Description: Ip Address of AP
    Value: !GetAtt APBlueInstance.PrivateIp
  APRedHostname:
    Condition: CreateAP
    Description: Hostname of AP
    Value: !Ref APRedPrivateIPDNSRecord
  APRedIpAddress:
    Condition: CreateAP
    Description: Ip Address of AP
    Value: !GetAtt APRedInstance.PrivateIp

